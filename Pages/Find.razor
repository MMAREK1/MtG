@page "/Find"

@using Blazor.Data
@using System.IO;
@using System.Collections.Generic;
@inject KartyService CardService

<h1>Moje Karty</h1>

<br>
<div class="container">
  <div class="row">
    <div class="col-xs-6 col-sm-3 col-md-3">
<input placeholder="Card Name" @bind="cardName" class="col-10"/><br>
</div>
</div>
</div>
<center>
<select name="Zdroj" @onchange="Changed">
    @foreach(var file in files)
    {
        <option value = "@file"> @file.Substring(file.IndexOf('\\')+1) </option >
    }
</select>
<button @onclick="FindCards" style="display: inline-block;">Find</button>
<br>
Cards count: @count
</center>
<br>

@if (cards == null)
{
    <p><em>Loading...</em></p>
}
else
{	
<div class="row" id="contentPanel">
    @foreach(var image in GetImageToShow())
    {
		@if(image.Url.IndexOf('|') != -1)
	    {
	        <div class="card-container" @onclick="FlipMe">
                <div class="card-flip @flipCss">
                    <!-- Card 2 Front -->
                    <div class="card front">
                        <img src="@image.Url.Substring(0,image.Url.IndexOf('|'))" title="@image.Name" width="265" height="370" />
                    </div>
                    <!-- End Card 2 Front -->
                    <!-- Card 2 Back -->
                    <div class="card back">
                        <img src="@image.Url.Substring(image.Url.IndexOf('|')+1)" title="@image.Name" width="265" height="370" />
                    </div>
                    <!-- End Card 2 Back -->
                </div>
            </div>
	    }
	    else
	    {
            <img src="@image.Url" title="@image.Name" width="265" height="370" />
	    }
    }
</div>
<div class="clear" style="margin:15px;">
    <button class="btn btn-info @DisablePrevious" @onclick="MovePrevious"  >Prev</button>
    <button class="btn btn-info @DisableNext" @onclick="MoveNext">Next</button>
    page: <span>@CurrentPage / @NumberOfPages() </span>
</div>
}

@code {
    private Blazor.Data.Karty[] cards;
    private int CurrentPage { get; set; } = 1;
    private int RecordsPerPage = 150;
    private string cardName;
    private int count =0;

    bool flipped=true;
    void FlipMe()
    {
        flipped = !flipped;
    }
    string flipCss => flipped ? "front" : "back";


    void MoveNext()
    {
        if (CurrentPage < NumberOfPages())
        {
            CurrentPage++;
        }
    }

    void MovePrevious()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
        }

    }

    string DisablePrevious {
        get {
            if (CurrentPage == 1) { return "disabled"; }
            return "";
        }
    }
    string DisableNext {
        get {
            if (CurrentPage >= NumberOfPages()) { return "disabled"; }
            return "";
        }
    }


    int NumberOfPages()
    {
        return (int)(Math.Ceiling((cards.Count()/(double)RecordsPerPage)));
    }


    List<Blazor.Data.Karty> GetImageToShow()
    {
        int skip = (CurrentPage - 1) * RecordsPerPage;

        return cards.Skip(skip).Take(RecordsPerPage).ToList();
    }

    string whiteId;

    string WhiteID
    {
        get => whiteId;
        set
        {
            whiteId = value;

        }
    }

    private async Task FindCards()
    {
        CurrentPage=1;
        cards = await CardService.Search(!string.IsNullOrWhiteSpace(cardName) ? cardName : null);
       count=cards.Length; 
    }
}
