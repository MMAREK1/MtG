@page "/Duplicates"

@using Blazor.Data
@using System.IO;
@using System.Collections.Generic;
@inject KartyService CardService

<h1>Duplikaty</h1>

<br>
<div class="container">
    <div class="row">

        <div class="col-xs-6 col-sm-3 col-md-3">

            <label for="ManaCost">duplicates: </label>
            <select name="ManaCost" @bind="@Mana">
                <option value="1">  </option>
                <option value="2"> 2 </option>
                <option value="3"> 3 </option>
                <option value="4"> 4 </option>
                <option value="5"> 5 </option>
                <option value="6"> 6 </option>
                <option value="7"> 7 </option>
                <option value="8"> 8 </option>
                <option value="9"> 9 </option>
                <option value="10"> 10 </option>
                <option value="11"> 11 </option>
                <option value="12"> 12 </option>
            </select>

        </div>
        <div class="col-xs-6 col-sm-3 col-md-3">

            <label for="Rarita">Rarita: </label>
            <select name="Rarita" @bind="@Rarita">
                <option value="0">  </option>
                <option value="C"> C </option>
                <option value="U"> U </option>
                <option value="R"> R </option>
                <option value="M"> M </option>
                <option value="S"> S </option>
            </select>

        </div>
    </div>
    <div class="row">
        <div class="col-xs-6 col-sm-3 col-md-3">
            <br />
            <label for="Set">Set: </label>
            <select name="Set" @bind="@set">
                @foreach (var zaznam in Sets)
                {
                    <option value="@zaznam.Code"> @zaznam.Name </option>
                }
            </select><br />
        </div>
    </div>
</div>
<br>
<center>
    <select name="Zdroj" @onchange="Changed">
        @foreach (var file in files)
        {
            <option value="@file"> @file.Substring(file.IndexOf('\\') + 1) </option>
        }
    </select>
    <button @onclick="FindCards" style="display: inline-block;">Filter</button>
    <button @onclick="OnInitializedAsync" style="display: inline-block;">Clear</button>
    <br>
    Cards count: @count
</center>
<br>

@if (cards == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row" id="contentPanel">
        @foreach (var image in GetImageToShow())
        {
            @if (image.Url.IndexOf('|') != -1)
            {
                <a href="@image.Url.Substring(image.Url.IndexOf('|')+1)" target="_blank"><img src="@image.Url.Substring(0,image.Url.IndexOf('|'))" title="@image.Name" width="265" height="370" /></a>
            }
            else
            {
                <img src="@image.Url" title="@image.Name" width="265" height="370" />
            }
        }
    </div>
    <div class="clear" style="margin:15px;">
        <button class="btn btn-info @DisablePrevious" @onclick="MovePrevious">Prev</button>
        <button class="btn btn-info @DisableNext" @onclick="MoveNext">Next</button>
        page: <span>@CurrentPage / @NumberOfPages() </span>
    </div>
}

@code {
    private Blazor.Data.Karty[] cards;
    private int CurrentPage { get; set; } = 1;
    private int RecordsPerPage = 150;
    private List<Blazor.Data.Choice> Choices = new List<Blazor.Data.Choice> { new Blazor.Data.Choice(1, "Je"), new Blazor.Data.Choice(2, "Moze"), new Blazor.Data.Choice(3, "Nie Je") };
    private List<Blazor.Data.SetList> Sets = new List<Blazor.Data.SetList> { };
    private string[] fileEntries;
    private List<string> files = new List<string>();
    private string subor;
    private string Rarita;
    private string set;
    private string cardName;
    private string cardType;
    private string cardText;
    private int count = 0;
    private bool Common;
    private bool Uncommon;
    private bool Rare;
    private bool Mythic;
    private bool Legendary;
    private bool Snow;
    private bool Artifact;
    private bool Land;
    private bool Instant;
    private bool Creature;
    private bool Planeswalker;
    private bool Sorcery;
    private bool Enchantment;
    private int White = 2;
    private int Black = 2;
    private int Blue = 2;
    private int Red = 2;
    private int Green = 2;
    private bool Colorless;
    private bool Monocolor;
    private bool Bicolor;
    private bool Tricolor;
    private bool Fourcolor;
    private bool Fivecolor;
    private bool Foil;
    private bool Showcase;
    private bool Singleton;
    private string Mana;
    bool flipped = true;
    void FlipMe()
    {
        flipped = !flipped;
    }
    string flipCss => flipped ? "front" : "back";


    void MoveNext()
    {
        if (CurrentPage < NumberOfPages())
        {
            CurrentPage++;
        }
    }

    void MovePrevious()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
        }

    }

    string DisablePrevious
    {
        get
        {
            if (CurrentPage == 1) { return "disabled"; }
            return "";
        }
    }
    string DisableNext
    {
        get
        {
            if (CurrentPage >= NumberOfPages()) { return "disabled"; }
            return "";
        }
    }


    int NumberOfPages()
    {
        return (int)(Math.Ceiling((cards.Count() / (double)RecordsPerPage)));
    }


    List<Blazor.Data.Karty> GetImageToShow()
    {
        int skip = (CurrentPage - 1) * RecordsPerPage;

        return cards.Skip(skip).Take(RecordsPerPage).ToList();
    }

    private async Task Changed(ChangeEventArgs suborEvent)
    {
        set = "0";
        Sets.Clear();
        subor = suborEvent.Value.ToString();
        Sets.AddRange(await CardService.ListOfSets(subor));
    }

    protected override async Task OnInitializedAsync()
    {
        fileEntries = new string[] { "json\\All.json" }; ;
        files = fileEntries.ToList();
        set = "0";
        CurrentPage = 1;
        subor = fileEntries[0];
        Mana = "0";
        Rarita = "0";
        Sets.Clear();
        Sets.AddRange(await CardService.ListOfSets(subor));

    }

    string whiteId;

    string WhiteID
    {
        get => whiteId;
        set
        {
            whiteId = value;

        }
    }

    private async Task FindCards()
    {
        CurrentPage = 1;
        cards = await CardService.FindDuplicateCards(subor, false, Int32.Parse(Mana),set, true,Rarita);
        count = cards.Length;
    }
}
