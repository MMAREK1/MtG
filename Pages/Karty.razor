@page "/Karty"

@using Blazor.Data
@using System.IO;
@using System.Collections.Generic;
@inject KartyService CardService

<h1>Moje Karty</h1>

<br>
<div class="container">
  <div class="row">
    <div class="col-xs-6 col-sm-3 col-md-3">
<table>
<input placeholder="Card Name" @bind="cardName" class="col-10"/><br>
<input placeholder="Card Type" @bind="cardType" class="col-10"/><br>
<input placeholder="Card Text" @bind="cardText" class="col-10"/><br>
<input type="checkbox" @bind="Legendary" > Legendary<br>
<input type="checkbox" @bind="Snow" > Snow<br>
</table>
</div>
<div class="col-xs-6 col-sm-3 col-md-3">
<table>
<input type="checkbox" @bind="Common" > Common<br>
<input type="checkbox" @bind="Uncommon" > Uncommon<br>
<input type="checkbox" @bind="Rare" > Rare<br>
<input type="checkbox" @bind="Mythic" > Mythic<br>
</table>
</div>
<div class="col-xs-6 col-sm-3 col-md-3">
<table>
<input type="checkbox" @bind="Artifact" > Artifact<br>
<input type="checkbox" @bind="Land" > Land<br>
<input type="checkbox" @bind="Instant" > Instant<br>
<input type="checkbox" @bind="Creature" > Creature<br>
<input type="checkbox" @bind="Planeswalker" > Planeswalker<br>
<input type="checkbox" @bind="Sorcery" > Sorcery<br>
<input type="checkbox" @bind="Enchantment" > Enchantment
</table>
</div>
</div>
<div class="row">
<div class="col-xs-6 col-sm-3 col-md-3">
<label for="White">White: </label> 
<select name="White" @bind="@White">
    @foreach(var choise in Choices)
    {
        <option value = "@choise.Code"> @choise.Name </option >
    }
</select><br>
<label for="Black">Black: </label>
<select name="Black" @bind="@Black">
    @foreach(var choise in Choices)
    {
        <option value = "@choise.Code"> @choise.Name </option >
    }
</select><br>
<label for="Blue">Blue: </label>
<select name="Blue" @bind="@Blue">
    @foreach(var choise in Choices)
    {
        <option value = "@choise.Code"> @choise.Name </option >
    }
</select><br>
<label for="Red">Red: </label>
<select name="Red" @bind="@Red">
    @foreach(var choise in Choices)
    {
        <option value = "@choise.Code"> @choise.Name </option >
    }
</select><br>
<label for="Green">Green: </label>
<select name="Green" @bind="@Green">
    @foreach(var choise in Choices)
    {
        <option value = "@choise.Code"> @choise.Name </option >
    }
</select>
</div>
<div class="col-xs-6 col-sm-3 col-md-3">
<table>
<input type="checkbox" @bind="Colorless" > Colorless<br>
<input type="checkbox" @bind="Monocolor" > Monocolor<br>
<input type="checkbox" @bind="Bicolor" > Bicolor<br>
<input type="checkbox" @bind="Tricolor" > Tricolor<br>
<input type="checkbox" @bind="Fourcolor" > Fourcolor<br>
<input type="checkbox" @bind="Fivecolor" > Fivecolor<br>
</table>
</div>
	<div class="col-xs-6 col-sm-3 col-md-3">
		<br />
<label for="Set">Set: </label>
<select name="Set" @bind="@set">
    @foreach(var zaznam in Sets)
    {
        <option value = "@zaznam.Code"> @zaznam.Name </option >
    }
</select><br />
	<input type="checkbox" @bind="Foil" > Foil<br />
	<input type="checkbox" @bind="Showcase" > Showcase<br />
	<br />
	<input type="checkbox" @bind="Singleton" > Singleton<br />
</div>
</div>
</div>
<br>
<center>
<select name="Zdroj" @onchange="Changed">
    @foreach(var file in files)
    {
        <option value = "@file"> @file.Substring(file.IndexOf('\\')+1) </option >
    }
</select>
<button @onclick="FindCards" style="display: inline-block;">Filter</button>
<button @onclick="OnInitializedAsync" style="display: inline-block;">Clear</button>
<br>
Cards count: @count
</center>
<br>

@if (cards == null)
{
    <p><em>Loading...</em></p>
}
else
{	
<div class="row" id="contentPanel">
    @foreach(var image in GetImageToShow())
    {
		@if(image.Url.IndexOf('|') != -1)
	    {
	        <div class="card-container" @onclick="FlipMe">
                <div class="card-flip @flipCss">
                    <!-- Card 2 Front -->
                    <div class="card front">
                        <img src="@image.Url.Substring(0,image.Url.IndexOf('|'))" title="@image.Name" width="265" height="370" />
                    </div>
                    <!-- End Card 2 Front -->
                    <!-- Card 2 Back -->
                    <div class="card back">
                        <img src="@image.Url.Substring(image.Url.IndexOf('|')+1)" title="@image.Name" width="265" height="370" />
                    </div>
                    <!-- End Card 2 Back -->
                </div>
            </div>
	    }
	    else
	    {
            <img src="@image.Url" title="@image.Name" width="265" height="370" />
	    }
    }
</div>
<div class="clear" style="margin:15px;">
    <button class="btn btn-info @DisablePrevious" @onclick="MovePrevious"  >Prev</button>
    <button class="btn btn-info @DisableNext" @onclick="MoveNext">Next</button>
    page: <span>@CurrentPage / @NumberOfPages() </span>
</div>
}

@code {
    private Blazor.Data.Karty[] cards;
	private int CurrentPage { get; set; } = 1;
    private int RecordsPerPage = 30;
	private List<Blazor.Data.Choice> Choices = new List<Blazor.Data.Choice>{ new Blazor.Data.Choice(1,"Je"),new Blazor.Data.Choice(2,"Moze"),new Blazor.Data.Choice(3,"Nie Je")};
	private List<Blazor.Data.SetList> Sets = new List<Blazor.Data.SetList>{};
	private string[] fileEntries;
	private List<string> files=new List<string>();
	private string subor;
	private string set;
	private string cardName;
	private string cardType;
	private string cardText;
	private int count =0;
	private bool Common;
	private bool Uncommon;
	private bool Rare;
	private bool Mythic;
	private bool Legendary;
	private bool Snow;
	private bool Artifact;
	private bool Land;
	private bool Instant;
	private bool Creature;
    private bool Planeswalker;
	private bool Sorcery;
	private bool Enchantment;
	private int White = 2;
	private int Black = 2;
	private int Blue = 2;
	private int Red = 2;
	private int Green = 2;
	private bool Colorless;
	private bool Monocolor;
	private bool Bicolor;
	private bool Tricolor;
	private bool Fourcolor;
	private bool Fivecolor;
	private bool Foil;
	private bool Showcase;
	private bool Singleton;
	bool flipped=true;
    void FlipMe()
    {
        flipped = !flipped;
    }
    string flipCss => flipped ? "front" : "back";


    void MoveNext()
    {
        if (CurrentPage < NumberOfPages())
        {
            CurrentPage++;
        }
    }

    void MovePrevious()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
        }

    }

    string DisablePrevious {
        get {
            if (CurrentPage == 1) { return "disabled"; }
            return ""; 
        }
    }
    string DisableNext {
        get {
            if (CurrentPage >= NumberOfPages()) { return "disabled"; }
            return ""; 
        }
    }


    int NumberOfPages()
    {
        return (int)(Math.Ceiling((cards.Count()/(double)RecordsPerPage)));
    }


    List<Blazor.Data.Karty> GetImageToShow()
    {
        int skip = (CurrentPage - 1) * RecordsPerPage;

        return cards.Skip(skip).Take(RecordsPerPage).ToList();
    }

	private async Task Changed(ChangeEventArgs suborEvent)
    {
		set="0";
		Sets.Clear();
		subor=suborEvent.Value.ToString();
		Sets.AddRange(await CardService.ListOfSets(subor));
    }

    protected override async Task OnInitializedAsync()
    {
		fileEntries = Directory.GetFiles(@"json\");
		files = fileEntries.ToList();
		Common=false;
		Uncommon=false;
		Rare=false;
		Mythic=false;
		Legendary=false;
		Snow=false;
		Artifact=false;
		Land=false;
		Instant=false;
		Creature=false;
		Planeswalker=false;
		Sorcery=false;
		Enchantment=false;
		White = 2;
		Black = 2;
		Blue = 2;
		Red = 2;
		Green = 2;
		Colorless=false;
		Monocolor=false;
		Bicolor=false;
		Tricolor=false;
		Fourcolor=false;
		Fivecolor=false;
		Showcase=false;
		Singleton=false;
		Foil=false;
		set="0";
		cardName="";
		cardType="";
		cardText="";
		CurrentPage=1;
		subor=fileEntries[0];
        cards = await CardService.AllCards(subor);
		Sets.Clear();
		Sets.AddRange(await CardService.ListOfSets(subor));
		count=cards.Length;
    }
	
	string whiteId;

    string WhiteID
    {
        get => whiteId;
        set
        {
            whiteId = value;

        }
    }
	
	private async Task FindCards()
    {
		CurrentPage=1;
        cards = await CardService.FindCards(subor,Singleton, new Blazor.Data.Filter{
			Name=!string.IsNullOrWhiteSpace(cardName)?cardName:null,
			CardType=!string.IsNullOrWhiteSpace(cardType)?cardType:null,
			Text=!string.IsNullOrWhiteSpace(cardText)?cardText:null,
			Legendary=Legendary,
			Snow=Snow,
			Rarita= new Blazor.Data.Rarity{
			Common=Common,
			Uncommon=Uncommon,
			Rare=Rare,
			Mythic=Mythic
			},
			Typy=new Blazor.Data.Type{
				Artifact=Artifact,
				Land=Land,
				Instant=Instant,
				Creature=Creature,
				Planeswalker=Planeswalker,
				Sorcery=Sorcery,
				Enchantment=Enchantment
			},
			Colors= new Blazor.Data.Color{
			White= White,
			Black=Black,
			Blue=Blue,
			Red=Red, 
			Green=Green,
			},
			Colorless=Colorless,
			Monocolor=Monocolor,
			Bicolor=Bicolor,
			Tricolor=Tricolor,
			Fourcolor=Fourcolor,
			Fivecolor=Fivecolor,
			Foil=Foil,
			Showcase=Showcase,
			Edition=set
		});
       count=cards.Length; 
    }
}
